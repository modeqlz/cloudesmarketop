import { useEffect, useState } from 'react';
import Head from 'next/head';
import LoadingCard from '../components/LoadingCard';
import { useAuth } from '../lib/useAuth';

export default function ProfilePage() {
  const { user, loading, error, logout } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    bio: '',
    status: '',
    interests: '',
    experience: '',
    location: ''
  });
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    if (!loading && !user) {
      window.location.replace('/');
    }
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage
    if (user) {
      const savedProfile = localStorage.getItem(`profile_${user.telegram_id}`);
      if (savedProfile) {
        setProfileData(JSON.parse(savedProfile));
      }
    }
  }, [user, loading]);

  const handleSave = async () => {
    if (!user) return;
    setIsSaving(true);
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API –≤—ã–∑–æ–≤)
      localStorage.setItem(`profile_${user.telegram_id}`, JSON.stringify(profileData));
      setIsEditing(false);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedProfile = localStorage.getItem(`profile_${user.telegram_id}`);
    if (savedProfile) {
      setProfileData(JSON.parse(savedProfile));
    } else {
      setProfileData({
        bio: '',
        status: '',
        interests: '',
        experience: '',
        location: ''
      });
    }
    setIsEditing(false);
  };

  if (loading) {
    return (
      <>
        <Head><title>–ü—Ä–æ—Ñ–∏–ª—å ‚Äî Spectra Market</title></Head>
        <div className="overlay" aria-hidden>
          <div className="overlay-backdrop" />
          <div className="overlay-panel">
            <LoadingCard
              messages={[
                '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶',
                '–í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ‚Ä¶',
                '–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚Ä¶',
                '–ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶'
              ]}
              intervalMs={700}
            />
            <div className="overlay-hint">–°–µ–∫—É–Ω–¥—É‚Ä¶</div>
          </div>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Head><title>–ü—Ä–æ—Ñ–∏–ª—å ‚Äî Spectra Market</title></Head>
        <div className="container">
          <div className="hero" style={{maxWidth:560, textAlign:'center', padding:'32px'}}>
            <div style={{color:'#ffb4b4', marginBottom:16}}>‚ö†Ô∏è {error}</div>
            <div>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é...</div>
          </div>
        </div>
      </>
    );
  }

  if (!user) {
    return (
      <>
        <Head><title>–ü—Ä–æ—Ñ–∏–ª—å ‚Äî Spectra Market</title></Head>
        <div className="container">
          <div className="hero" style={{maxWidth:560, textAlign:'center', padding:'32px'}}>
            <p className="lead" style={{marginBottom:16}}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.</p>
            <div className="row" style={{justifyContent:'center'}}>
              <a className="btn btn-primary" href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
          </div>
        </div>
      </>
    );
  }

  const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || '–ë–µ–∑ –∏–º–µ–Ω–∏';
  const at = user.username ? '@' + user.username : '–±–µ–∑ username';
  const avatar = user.photo_url || '/placeholder.png';
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
  const ADMIN_IDS = ['YOUR_TELEGRAM_ID']; // –°—é–¥–∞ –≤–ø–∏—à–∏ —Å–≤–æ–π telegram_id
  const isAdmin = ADMIN_IDS.includes(user.telegram_id?.toString());

  return (
    <>
      <Head><title>–ü—Ä–æ—Ñ–∏–ª—å ‚Äî Spectra Market</title></Head>
      <div className="container">
        <div className="hero" style={{maxWidth:560}}>
          <div className="brand" style={{justifyContent:'space-between', width:'100%'}}>
            <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
            <button className="btn btn-ghost" onClick={logout}>–í—ã–π—Ç–∏</button>
          </div>

          <div style={{display:'flex', alignItems:'center', gap:14, marginTop:6}}>
            <img
              src={avatar}
              alt="avatar"
              style={{
                width:56, height:56, borderRadius:16,
                objectFit:'cover', border:'1px solid var(--border)'
              }}
            />
            <div>
              <div className="h1" style={{fontSize:22, margin:'0 0 4px'}}>{name}</div>
              <div className="lead" style={{fontSize:14, margin:0}}>{at}</div>
            </div>
          </div>

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è */}
          <div className="profile-sections" style={{marginTop: 24}}>
            {/* –û —Å–µ–±–µ */}
            <div className="profile-section">
              <div className="profile-section-header">
                <h3 className="profile-section-title">üí¨ –û —Å–µ–±–µ</h3>
                {!isEditing && (
                  <button 
                    className="btn btn-ghost btn-sm"
                    onClick={() => setIsEditing(true)}
                    style={{fontSize: '12px', padding: '6px 12px'}}
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                )}
              </div>
              {isEditing ? (
                <textarea
                  className="profile-textarea"
                  value={profileData.bio}
                  onChange={(e) => setProfileData({...profileData, bio: e.target.value})}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                  rows={3}
                />
              ) : (
                <div className="profile-field-content">
                  {profileData.bio || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </div>
              )}
            </div>

            {/* –°—Ç–∞—Ç—É—Å */}
            <div className="profile-section">
              <div className="profile-section-header">
                <h3 className="profile-section-title">üéØ –°—Ç–∞—Ç—É—Å</h3>
              </div>
              {isEditing ? (
                <input
                  type="text"
                  className="profile-input"
                  value={profileData.status}
                  onChange={(e) => setProfileData({...profileData, status: e.target.value})}
                  placeholder="–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å..."
                />
              ) : (
                <div className="profile-field-content">
                  {profileData.status || '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                </div>
              )}
            </div>

            {/* –ò–Ω—Ç–µ—Ä–µ—Å—ã */}
            <div className="profile-section">
              <div className="profile-section-header">
                <h3 className="profile-section-title">üéÆ –ò–Ω—Ç–µ—Ä–µ—Å—ã</h3>
              </div>
              {isEditing ? (
                <input
                  type="text"
                  className="profile-input"
                  value={profileData.interests}
                  onChange={(e) => setProfileData({...profileData, interests: e.target.value})}
                  placeholder="CS2, Dota 2, NFT, —Ç—Ä–µ–π–¥–∏–Ω–≥..."
                />
              ) : (
                <div className="profile-field-content">
                  {profileData.interests || '–ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
                </div>
              )}
            </div>

            {/* –û–ø—ã—Ç */}
            <div className="profile-section">
              <div className="profile-section-header">
                <h3 className="profile-section-title">‚≠ê –û–ø—ã—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥–∞</h3>
              </div>
              {isEditing ? (
                <select
                  className="profile-select"
                  value={profileData.experience}
                  onChange={(e) => setProfileData({...profileData, experience: e.target.value})}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å</option>
                  <option value="beginner">üå± –ù–æ–≤–∏—á–æ–∫</option>
                  <option value="intermediate">üöÄ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å</option>
                  <option value="advanced">üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
                  <option value="expert">üëë –≠–∫—Å–ø–µ—Ä—Ç</option>
                </select>
              ) : (
                <div className="profile-field-content">
                  {profileData.experience === 'beginner' && 'üå± –ù–æ–≤–∏—á–æ–∫'}
                  {profileData.experience === 'intermediate' && 'üöÄ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'}
                  {profileData.experience === 'advanced' && 'üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
                  {profileData.experience === 'expert' && 'üëë –≠–∫—Å–ø–µ—Ä—Ç'}
                  {!profileData.experience && '–û–ø—ã—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}
                </div>
              )}
            </div>

            {/* –õ–æ–∫–∞—Ü–∏—è */}
            <div className="profile-section">
              <div className="profile-section-header">
                <h3 className="profile-section-title">üìç –õ–æ–∫–∞—Ü–∏—è</h3>
              </div>
              {isEditing ? (
                <input
                  type="text"
                  className="profile-input"
                  value={profileData.location}
                  onChange={(e) => setProfileData({...profileData, location: e.target.value})}
                  placeholder="–í–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞..."
                />
              ) : (
                <div className="profile-field-content">
                  {profileData.location || '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </div>
              )}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã */}
          {isEditing && (
            <div className="profile-actions" style={{marginTop: 24, display: 'flex', gap: '12px'}}>
              <button 
                className="btn btn-primary"
                onClick={handleSave}
                disabled={isSaving}
                style={{flex: 1}}
              >
                {isSaving ? 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
              <button 
                className="btn btn-ghost"
                onClick={handleCancel}
                disabled={isSaving}
                style={{flex: 1}}
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          )}

          <div style={{marginTop:24, opacity:.85, fontSize:14, borderTop: '1px solid var(--border)', paddingTop: 16}}>
            <div><b>ID:</b> {user.telegram_id}</div>
            <div><b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> Telegram WebApp</div>
          </div>

          {/* –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ */}
          {isAdmin && (
            <div style={{marginTop:20}}>
              <a href="/admin" className="btn btn-primary" style={{width:'100%', textAlign:'center'}}>
                üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
              </a>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
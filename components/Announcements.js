// components/Announcements.js
import { useState, useEffect } from 'react';

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)
const announcementsData = [
  {
    id: 1,
    title: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cloud–µ—Å Market!",
    text: "–¢–æ—Ä–≥—É–π —Å–∫–∏–Ω–∞–º–∏, —É—á–∞—Å—Ç–≤—É–π –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –∏ –Ω–∞—Ö–æ–¥–∏ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã. –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
    type: "welcome",
    date: "2024-01-15"
  },
  {
    id: 2,
    title: "üî• –ù–æ–≤—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
    text: "–°–ª–µ–¥–∏ –∑–∞ –≥–æ—Ä—è—á–∏–º–∏ –ª–æ—Ç–∞–º–∏! –†–µ–¥–∫–∏–µ —Å–∫–∏–Ω—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!",
    type: "auction",
    date: "2024-01-14"
  },
  {
    id: 3,
    title: "üíé –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤",
    text: "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ Pro —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.",
    type: "update",
    date: "2024-01-13"
  },
  {
    id: 4,
    title: "üõí –ú–∞—Ä–∫–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7",
    text: "–ü–æ–∫—É–ø–∞–π –∏ –ø—Ä–æ–¥–∞–≤–∞–π –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –ù–∞—à –º–∞—Ä–∫–µ—Ç –Ω–µ —Å–ø–∏—Ç, –∫–∞–∫ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã.",
    type: "info",
    date: "2024-01-12"
  }
];

export default function Announcements() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoPlaying, setIsAutoPlaying] = useState(true);
  const [touchStart, setTouchStart] = useState(null);
  const [touchEnd, setTouchEnd] = useState(null);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (!isAutoPlaying) return;
    
    const interval = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % announcementsData.length);
    }, 5000);
    
    return () => clearInterval(interval);
  }, [isAutoPlaying]);

  const goToSlide = (index) => {
    setCurrentIndex(index);
    setIsAutoPlaying(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    setTimeout(() => setIsAutoPlaying(true), 10000); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫
  };

  const nextSlide = () => {
    goToSlide((currentIndex + 1) % announcementsData.length);
  };

  const prevSlide = () => {
    goToSlide((currentIndex - 1 + announcementsData.length) % announcementsData.length);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤
  const minSwipeDistance = 50;

  const onTouchStart = (e) => {
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  };

  const onTouchMove = (e) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const onTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;

    if (isLeftSwipe) {
      nextSlide(); // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
    } else if (isRightSwipe) {
      prevSlide(); // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
    }
  };

  const getTypeColor = (type) => {
    switch(type) {
      case 'welcome': return 'rgba(123,199,255,0.6)';
      case 'auction': return 'rgba(255,140,0,0.6)';
      case 'update': return 'rgba(138,43,226,0.6)';
      case 'info': return 'rgba(34,193,195,0.6)';
      default: return 'rgba(123,199,255,0.6)';
    }
  };

  const currentAnnouncement = announcementsData[currentIndex];

  return (
    <div className="announcements-container">
      <div className="announcements-header">
        <div className="announcements-title">üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è</div>
        <div className="announcements-counter">
          {currentIndex + 1} / {announcementsData.length}
        </div>
      </div>
      
      <div 
        className="announcements-slider"
        onTouchStart={onTouchStart}
        onTouchMove={onTouchMove}
        onTouchEnd={onTouchEnd}
      >
        <div 
          className="announcement-card"
          style={{'--type-color': getTypeColor(currentAnnouncement.type)}}
        >
          <div className="announcement-content">
            <h3 className="announcement-title">{currentAnnouncement.title}</h3>
            <p className="announcement-text">{currentAnnouncement.text}</p>
            <div className="announcement-date">{currentAnnouncement.date}</div>
          </div>
        </div>
      </div>
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫ */}
      <div className="announcements-dots">
        {announcementsData.map((_, index) => (
          <button
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''}`}
            onClick={() => goToSlide(index)}
            aria-label={`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
}
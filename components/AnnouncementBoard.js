import React, { useState, useEffect, useRef } from 'react';
import styles from '../styles/announcementBoard.css';

const AnnouncementBoard = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isAutoPlaying, setIsAutoPlaying] = useState(true);
  const [isPaused, setIsPaused] = useState(false);
  const containerRef = useRef(null);
  const startXRef = useRef(0);
  const currentXRef = useRef(0);
  const isDraggingRef = useRef(false);

  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  const announcements = [
    {
      id: 1,
      type: 'WELCOME',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cloudes Market!',
      description: '–¢–æ—Ä–≥—É–π —Å–∫–∏–Ω–∞–º–∏, —É—á–∞—Å—Ç–≤—É–π –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –∏ –Ω–∞—Ö–æ–¥–∏ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã. –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
      emoji: 'üéâ',
      date: '8 —Å–µ–Ω—Ç.',
      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
    },
    {
      id: 2,
      type: 'PROMOTION',
      title: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!',
      description: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω—ã.',
      emoji: 'üî•',
      date: '7 —Å–µ–Ω—Ç.',
      gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
    },
    {
      id: 3,
      type: 'UPDATE',
      title: '–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      description: '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —É–ª—É—á—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏.',
      emoji: '‚ö°',
      date: '6 —Å–µ–Ω—Ç.',
      gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'
    },
    {
      id: 4,
      type: 'EVENT',
      title: '–¢—É—Ä–Ω–∏—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
      description: '–£—á–∞—Å—Ç–≤—É–π –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ! –õ—É—á—à–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–æ–Ω—É—Å—ã.',
      emoji: 'üèÜ',
      date: '5 —Å–µ–Ω—Ç.',
      gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
    }
  ];

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
  const nextAnnouncement = () => {
    if (isTransitioning) return;
    setIsTransitioning(true);
    setCurrentIndex((prev) => {
      const nextIndex = prev + 1;
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É
      return nextIndex >= announcements.length ? 0 : nextIndex;
    });
    setTimeout(() => setIsTransitioning(false), 300);
  };

  const prevAnnouncement = () => {
    if (isTransitioning) return;
    setIsTransitioning(true);
    setCurrentIndex((prev) => {
      const prevIndex = prev - 1;
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ü—É
      return prevIndex < 0 ? announcements.length - 1 : prevIndex;
    });
    setTimeout(() => setIsTransitioning(false), 300);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
  const goToAnnouncement = (index) => {
    if (isTransitioning || index === currentIndex) return;
    if (index >= 0 && index < announcements.length) {
      setIsTransitioning(true);
      setCurrentIndex(index);
      setTimeout(() => setIsTransitioning(false), 300);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à —Å—Ç—Ä–µ–ª–æ–∫
  useEffect(() => {
    const handleKeyDown = (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å –Ω–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –≤–≤–æ–¥–∞
      const activeElement = document.activeElement;
      const isInputFocused = activeElement && (
        activeElement.tagName === 'INPUT' ||
        activeElement.tagName === 'TEXTAREA' ||
        activeElement.contentEditable === 'true'
      );
      
      if (isInputFocused || isTransitioning) return;
      
      if (e.key === 'ArrowLeft') {
         e.preventDefault();
         handleUserNavigation(prevAnnouncement);
       } else if (e.key === 'ArrowRight') {
         e.preventDefault();
         handleUserNavigation(nextAnnouncement);
       } else if (e.key === 'Home') {
         e.preventDefault();
         pauseAutoPlay();
         setCurrentIndex(0);
       } else if (e.key === 'End') {
         e.preventDefault();
         pauseAutoPlay();
         setCurrentIndex(announcements.length - 1);
       } else if (e.key === ' ') {
         e.preventDefault();
         setIsAutoPlaying(prev => !prev); // –ü—Ä–æ–±–µ–ª –¥–ª—è –ø–∞—É–∑—ã/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
       }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–∏–º
    const container = containerRef.current;
    if (container) {
      container.setAttribute('tabindex', '0'); // –î–µ–ª–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º
      container.addEventListener('keydown', handleKeyDown);
      
      return () => {
        container.removeEventListener('keydown', handleKeyDown);
      };
    }
  }, [isTransitioning, announcements.length]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  useEffect(() => {
    if (!isAutoPlaying || isPaused || isTransitioning || announcements.length <= 1) {
      return;
    }

    const autoPlayInterval = setInterval(() => {
      nextAnnouncement();
    }, 5000); // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(autoPlayInterval);
  }, [isAutoPlaying, isPaused, isTransitioning, currentIndex, announcements.length]);

  // –ü–∞—É–∑–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const pauseAutoPlay = () => {
    setIsPaused(true);
    setTimeout(() => setIsPaused(false), 10000); // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–∞—É–∑–æ–π –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const handleUserNavigation = (navigationFn) => {
    pauseAutoPlay();
    navigationFn();
  };

  // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–≤–∞–π–ø–æ–≤
  const handleTouchStart = (e) => {
    if (isTransitioning) return;
    startXRef.current = e.touches[0].clientX;
    currentXRef.current = e.touches[0].clientX;
    isDraggingRef.current = true;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º—è —Å–≤–∞–π–ø–∞
    e.preventDefault();
  };

  const handleTouchMove = (e) => {
    if (!isDraggingRef.current || isTransitioning) return;
    
    currentXRef.current = e.touches[0].clientX;
    const deltaX = currentXRef.current - startXRef.current;
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ —Å–≤–∞–π–ø–µ
    if (containerRef.current) {
      const maxOffset = 30; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
      const offset = Math.max(-maxOffset, Math.min(maxOffset, deltaX * 0.3));
      containerRef.current.style.transform = `translateX(${offset}px)`;
    }
    
    e.preventDefault();
  };

  const handleTouchEnd = (e) => {
    if (!isDraggingRef.current || isTransitioning) return;
    
    const deltaX = currentXRef.current - startXRef.current;
    const minSwipeDistance = 60; // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const swipeVelocity = Math.abs(deltaX) / 100; // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–∞–π–ø–∞
    
    // –°–±—Ä–æ—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
    if (containerRef.current) {
      containerRef.current.style.transform = 'translateX(0)';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–∞–π–ø–∞
    if (Math.abs(deltaX) > minSwipeDistance || swipeVelocity > 0.5) {
      if (deltaX > 0) {
        handleUserNavigation(prevAnnouncement); // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
      } else {
        handleUserNavigation(nextAnnouncement); // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–µ–µ
      }
    }
    
    isDraggingRef.current = false;
    e.preventDefault();
  };

  // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
  const handleMouseDown = (e) => {
    if (isTransitioning) return;
    startXRef.current = e.clientX;
    currentXRef.current = e.clientX;
    isDraggingRef.current = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    
    e.preventDefault();
  };

  const handleMouseMove = (e) => {
    if (!isDraggingRef.current || isTransitioning) return;
    
    currentXRef.current = e.clientX;
    const deltaX = currentXRef.current - startXRef.current;
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    if (containerRef.current) {
      const maxOffset = 30;
      const offset = Math.max(-maxOffset, Math.min(maxOffset, deltaX * 0.3));
      containerRef.current.style.transform = `translateX(${offset}px)`;
    }
    
    e.preventDefault();
  };

  const handleMouseUp = (e) => {
    if (!isDraggingRef.current || isTransitioning) return;
    
    const deltaX = currentXRef.current - startXRef.current;
    const minSwipeDistance = 60;
    const swipeVelocity = Math.abs(deltaX) / 100;
    
    // –°–±—Ä–æ—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
    if (containerRef.current) {
      containerRef.current.style.transform = 'translateX(0)';
    }
    
    // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
    
    if (Math.abs(deltaX) > minSwipeDistance || swipeVelocity > 0.5) {
       if (deltaX > 0) {
         handleUserNavigation(prevAnnouncement);
       } else {
         handleUserNavigation(nextAnnouncement);
       }
     }
    
    isDraggingRef.current = false;
    e.preventDefault();
  };

  const currentAnnouncement = announcements[currentIndex];

  return (
    <div className="announcement-board">
      <div className="announcement-header">
        <div className="announcement-icon">üì¢</div>
        <h2>–û–±—ä—è–≤–ª–µ–Ω–∏—è</h2>
        <div className="announcement-counter">
          {currentIndex + 1} / {announcements.length}
        </div>
      </div>

      <div 
        className="announcement-container"
        ref={containerRef}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
      >
        <div 
          className={`announcement-card ${isTransitioning ? 'transitioning' : ''}`}
          style={{ background: currentAnnouncement.gradient }}
        >
          <div className="announcement-type">{currentAnnouncement.type}</div>
          
          <div className="announcement-content">
            <div className="announcement-emoji">{currentAnnouncement.emoji}</div>
            <h3 className="announcement-title">{currentAnnouncement.title}</h3>
            <p className="announcement-description">{currentAnnouncement.description}</p>
          </div>
          
          <div className="announcement-footer">
            <span className="announcement-date">{currentAnnouncement.date}</span>
            <button className="announcement-cta">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
          </div>
          
          <div className="announcement-decorative">
            <div className="gradient-orb"></div>
            <div className="floating-emoji">{currentAnnouncement.emoji}</div>
          </div>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
      <div className="announcement-indicators">
        {announcements.map((_, index) => (
          <button
            key={index}
            className={`indicator ${index === currentIndex ? 'active' : ''}`}
            onClick={() => {
               if (!isTransitioning && index !== currentIndex) {
                 pauseAutoPlay();
                 setCurrentIndex(index);
               }
             }}
            aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é ${index + 1}`}
            disabled={isTransitioning}
          />
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="announcement-navigation">
          <button 
            className="nav-button prev" 
            onClick={() => handleUserNavigation(prevAnnouncement)}
            disabled={isTransitioning}
            aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
          >
            ‚Üê
          </button>
          <button 
            className="nav-button next" 
            onClick={() => handleUserNavigation(nextAnnouncement)}
            disabled={isTransitioning}
            aria-label="–°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
          >
            ‚Üí
          </button>
          <button 
            className="nav-button play-pause" 
            onClick={() => setIsAutoPlaying(prev => !prev)}
            aria-label={isAutoPlaying ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ'}
          >
            {isAutoPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
          </button>
        </div>
    </div>
  );
};

export default AnnouncementBoard;
// components/WalletMenu.js
import { useState, useEffect } from 'react';
import TopUpModal from './TopUpModal';

export default function WalletMenu({ isOpen, onClose, user }) {
  const [isVisible, setIsVisible] = useState(false);
  const [isTopUpOpen, setIsTopUpOpen] = useState(false);
  const [balance, setBalance] = useState(0);
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
      loadWalletData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    } else {
      setIsTopUpOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º TopUpModal –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
      const timeout = setTimeout(() => setIsVisible(false), 300);
      return () => clearTimeout(timeout);
    }
  }, [isOpen]);

  const loadWalletData = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [balanceRes, transactionsRes] = await Promise.all([
        fetch(`/api/wallet/balance?telegram_id=${user.id}`),
        fetch(`/api/wallet/transactions?telegram_id=${user.id}&limit=10`)
      ]);

      if (balanceRes.ok) {
        const balanceData = await balanceRes.json();
        setBalance(balanceData.balance_usd || 0);
      }

      if (transactionsRes.ok) {
        const transactionsData = await transactionsRes.json();
        setTransactions(transactionsData.transactions || []);
      }

    } catch (error) {
      console.error('Error loading wallet data:', error);
    }
    setLoading(false);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape' && isOpen) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  if (!isVisible) return null;

  return (
    <div 
      className={`wallet-overlay ${isOpen ? 'open' : ''}`}
      onClick={handleBackdropClick}
    >
      <div className={`wallet-menu ${isOpen ? 'open' : ''}`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—à–µ–ª—å–∫–∞ */}
        <div className="wallet-header">
          <button className="wallet-back" onClick={onClose}>
            ‚Üê
          </button>
          <div className="wallet-header-title">–ú–æ–π –∫–æ—à–µ–ª–µ–∫</div>
          <div className="wallet-header-spacer"></div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å */}
        <div className="wallet-balance-section">
          <div className="balance-card">
            <div className="balance-icon">üí≥</div>
            <div className="balance-info">
              <div className="balance-label">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</div>
              <div className="balance-amount">
                {loading ? '‚è≥' : `$${balance.toFixed(2)}`}
              </div>
              <div className="balance-subtitle">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫</div>
            </div>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="wallet-actions">
          <div className="action-button" onClick={() => setIsTopUpOpen(true)}>
            <div className="action-icon">üí≥</div>
            <span>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</span>
          </div>
          <div className="action-button" onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>
            <div className="action-icon">üì§</div>
            <span>–í—ã–≤–µ—Å—Ç–∏</span>
          </div>
          <div className="action-button" onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>
            <div className="action-icon">üí∏</div>
            <span>–ü–µ—Ä–µ–≤–æ–¥</span>
          </div>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        <div className="wallet-content">
          <div className="transactions-section">
            <div className="section-title">üìà –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</div>
            
            <div className="transaction-list">
              {loading ? (
                <div className="transactions-loading">
                  <div className="loading-spinner">‚è≥</div>
                  <div>–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...</div>
                </div>
              ) : transactions.length > 0 ? (
                transactions.map((transaction) => (
                  <div key={transaction.id} className="transaction-item">
                    <div className={`transaction-icon ${transaction.className}`}>
                      {transaction.icon}
                    </div>
                    <div className="transaction-info">
                      <div className="transaction-title">{transaction.title}</div>
                      <div className="transaction-date">{transaction.date}</div>
                    </div>
                    <div className={`transaction-amount ${transaction.className}`}>
                      {transaction.amount_display}
                    </div>
                  </div>
                ))
              ) : (
                <div className="transactions-empty">
                  <div className="empty-icon">üì≠</div>
                  <div className="empty-text">–ü–æ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç</div>
                  <div className="empty-hint">–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ—à–µ–ª—å–∫–æ–º</div>
                </div>
              )}
            </div>

            <button className="show-all-button">
              –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            </button>
          </div>

          {/* –ö–∞—Ä—Ç—ã –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã */}
          <div className="payment-methods-section">
            <div className="section-title">üí≥ –°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</div>
            
            <div className="payment-method">
              <div className="payment-icon">üè¶</div>
              <div className="payment-info">
                <div className="payment-name">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</div>
                <div className="payment-desc">Visa, MasterCard, –ú–ò–†</div>
              </div>
              <div className="payment-arrow">‚Üí</div>
            </div>

            <div className="payment-method">
              <div className="payment-icon">üì±</div>
              <div className="payment-info">
                <div className="payment-name">–°–ë–ü</div>
                <div className="payment-desc">–ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏</div>
              </div>
              <div className="payment-arrow">‚Üí</div>
            </div>

            <div className="payment-method">
              <div className="payment-icon">üéÆ</div>
              <div className="payment-info">
                <div className="payment-name">Steam –∫–æ—à–µ–ª–µ–∫</div>
                <div className="payment-desc">–û–±–º–µ–Ω —Å—Ä–µ–¥—Å—Ç–≤ Steam</div>
              </div>
              <div className="payment-arrow">‚Üí</div>
            </div>
          </div>
        </div>
      </div>

      {/* TopUp Modal */}
      <TopUpModal
        isOpen={isTopUpOpen}
        onClose={() => setIsTopUpOpen(false)}
        userId={user?.id || 0}
        onSuccess={() => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
          loadWalletData();
        }}
      />
    </div>
  );
}
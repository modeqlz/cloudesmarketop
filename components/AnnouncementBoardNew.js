import React, { useState, useEffect, useRef } from 'react';
import styles from '../styles/AnnouncementBoardNew.module.css';

const AnnouncementBoardNew = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const containerRef = useRef(null);
  const startXRef = useRef(0);
  const currentXRef = useRef(0);
  const isDraggingRef = useRef(false);

  // –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  const announcements = [
    {
      id: 1,
      type: 'MARKET',
      title: 'MARKET',
      subtitle: '–ú–∞—Ä–∫–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7',
      description: '–ü–æ–∫—É–ø–∞–π –∏ –ø—Ä–æ–¥–∞–≤–∞–π –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –ù–∞—à –º–∞—Ä–∫–µ—Ç –Ω–µ —Å–ø–∏—Ç, –∫–∞–∫ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã. –ë–æ–ª–µ–µ 10,000 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!',
      action: '–ß–∏—Ç–∞—Ç—å –≤ Telegram',
      icon: 'üì¶',
      background: 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)'
    },
    {
      id: 2,
      type: 'PROMOTION',
      title: 'PROMOTION',
      subtitle: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!',
      description: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω—ã.',
      action: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
      icon: 'üî•',
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
    },
    {
      id: 3,
      type: 'UPDATE',
      title: 'UPDATE',
      subtitle: '–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      description: '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —É–ª—É—á—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏.',
      action: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
      icon: '‚ö°',
      background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'
    },
    {
      id: 4,
      type: 'EVENT',
      title: 'EVENT',
      subtitle: '–¢—É—Ä–Ω–∏—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
      description: '–£—á–∞—Å—Ç–≤—É–π –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ! –õ—É—á—à–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–æ–Ω—É—Å—ã.',
      action: '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
      icon: 'üèÜ',
      background: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
    }
  ];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞
  const handleTouchStart = (e) => {
    if (isTransitioning) return;
    startXRef.current = e.touches[0].clientX;
    currentXRef.current = e.touches[0].clientX;
    isDraggingRef.current = true;
  };

  const handleTouchMove = (e) => {
    if (!isDraggingRef.current || isTransitioning) return;
    currentXRef.current = e.touches[0].clientX;
  };

  const handleTouchEnd = () => {
    if (!isDraggingRef.current || isTransitioning) return;
    
    const deltaX = currentXRef.current - startXRef.current;
    const threshold = 50;

    if (Math.abs(deltaX) > threshold) {
      if (deltaX > 0 && currentIndex > 0) {
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        goToPrevious();
      } else if (deltaX < 0 && currentIndex < announcements.length - 1) {
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        goToNext();
      }
    }

    isDraggingRef.current = false;
  };

  const goToNext = () => {
    if (isTransitioning || currentIndex >= announcements.length - 1) return;
    setIsTransitioning(true);
    setCurrentIndex(prev => prev + 1);
    setTimeout(() => setIsTransitioning(false), 300);
  };

  const goToPrevious = () => {
    if (isTransitioning || currentIndex <= 0) return;
    setIsTransitioning(true);
    setCurrentIndex(prev => prev - 1);
    setTimeout(() => setIsTransitioning(false), 300);
  };

  const goToSlide = (index) => {
    if (isTransitioning || index === currentIndex) return;
    setIsTransitioning(true);
    setCurrentIndex(index);
    setTimeout(() => setIsTransitioning(false), 300);
  };

  return (
    <div className={styles.announcementBoard}>
      <div className={styles.header}>
        <div className={styles.headerIcon}>üì¢</div>
        <h2 className={styles.headerTitle}>–û–±—ä—è–≤–ª–µ–Ω–∏—è</h2>
        <div className={styles.counter}>
          {currentIndex + 1} / {announcements.length}
        </div>
      </div>

      <div 
        className={styles.container}
        ref={containerRef}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <div 
          className={styles.slider}
          style={{
            transform: `translateX(-${currentIndex * 100}%)`,
            transition: isTransitioning ? 'transform 0.3s ease-out' : 'none'
          }}
        >
          {announcements.map((announcement, index) => (
            <div 
              key={announcement.id}
              className={styles.slide}
              style={{ background: announcement.background }}
            >
              <div className={styles.slideContent}>
                <div className={styles.slideHeader}>
                  <span className={styles.slideType}>{announcement.type}</span>
                  <span className={styles.slideIcon}>{announcement.icon}</span>
                </div>
                
                <h3 className={styles.slideTitle}>{announcement.subtitle}</h3>
                <p className={styles.slideDescription}>{announcement.description}</p>
                
                <button className={styles.slideAction}>
                  {announcement.action}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className={styles.indicators}>
        {announcements.map((_, index) => (
          <button
            key={index}
            className={`${styles.indicator} ${index === currentIndex ? styles.active : ''}`}
            onClick={() => goToSlide(index)}
            aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default AnnouncementBoardNew;